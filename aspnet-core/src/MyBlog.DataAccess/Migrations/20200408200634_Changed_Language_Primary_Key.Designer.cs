// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MyBlog.DataAccess.Concrete.EntityFrameworkCore;

namespace MyBlog.DataAccess.Migrations
{
    [DbContext(typeof(MyBlogDbContext))]
    [Migration("20200408200634_Changed_Language_Primary_Key")]
    partial class Changed_Language_Primary_Key
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("MyBlog.Entities.Concrete.Article", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CategoryId")
                        .HasColumnName("category_id")
                        .HasColumnType("int");

                    b.Property<DateTime>("PublishDate")
                        .HasColumnName("publish_date")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnName("user_id")
                        .HasColumnType("int");

                    b.Property<int>("ViewCount")
                        .HasColumnName("view_count")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("id");

                    b.HasIndex("CategoryId")
                        .HasName("article_ix_category_id");

                    b.HasIndex("UserId")
                        .HasName("article_ix_user_id");

                    b.ToTable("Articles","dbo");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.ArticleTranslation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ArticleId")
                        .HasColumnName("article_id")
                        .HasColumnType("int");

                    b.Property<string>("ContentMain")
                        .IsRequired()
                        .HasColumnName("content_main")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContentSummary")
                        .IsRequired()
                        .HasColumnName("content_summary")
                        .HasColumnType("nvarchar(1024)")
                        .HasMaxLength(1024);

                    b.Property<string>("LanguageCode")
                        .IsRequired()
                        .HasColumnName("language_code")
                        .HasColumnType("char(5)")
                        .IsFixedLength(true)
                        .HasMaxLength(5)
                        .IsUnicode(false);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnName("title")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("Id")
                        .HasName("article_translation_pkey");

                    b.HasIndex("ArticleId")
                        .HasName("article_translation_ix_article_id");

                    b.HasIndex("LanguageCode")
                        .HasName("article_translation_ix_language_code");

                    b.ToTable("Article_Translations","dbo");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnName("created_date")
                        .HasColumnType("datetime2");

                    b.HasKey("Id")
                        .HasName("article_pkey");

                    b.ToTable("Categories","dbo");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.CategoryTranslation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CategoryId")
                        .HasColumnName("category_id")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnName("description")
                        .HasColumnType("nvarchar(1024)")
                        .HasMaxLength(1024);

                    b.Property<string>("LanguageCode")
                        .IsRequired()
                        .HasColumnName("language_code")
                        .HasColumnType("char(5)")
                        .IsFixedLength(true)
                        .HasMaxLength(5)
                        .IsUnicode(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id")
                        .HasName("category_translation_pkey");

                    b.HasIndex("CategoryId")
                        .HasName("category_translation_ix_category_id");

                    b.HasIndex("LanguageCode")
                        .HasName("category_translation_ix_language_code");

                    b.ToTable("Category_Translations","dbo");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ArticleId")
                        .HasColumnName("article_id")
                        .HasColumnType("int");

                    b.Property<string>("ContentMain")
                        .IsRequired()
                        .HasColumnName("content_main")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int?>("ParentId")
                        .HasColumnName("parent_id")
                        .HasColumnType("int");

                    b.Property<DateTime>("PublishDate")
                        .HasColumnName("publish_date")
                        .HasColumnType("datetime2");

                    b.HasKey("Id")
                        .HasName("comment_pkey");

                    b.HasIndex("ArticleId")
                        .HasName("comment_ix_article_id");

                    b.HasIndex("ParentId")
                        .HasName("comment_ix_parent_id");

                    b.ToTable("Comments","dbo");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Language", b =>
                {
                    b.Property<string>("LanguageCode")
                        .HasColumnName("language_code")
                        .HasColumnType("char(5)")
                        .IsFixedLength(true)
                        .HasMaxLength(5)
                        .IsUnicode(false);

                    b.Property<bool>("IsDefault")
                        .HasColumnName("is_default")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("LanguageCode")
                        .HasName("language_pkey");

                    b.ToTable("Languages");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Picture", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ArticleId")
                        .HasColumnName("article_id")
                        .HasColumnType("int");

                    b.Property<bool>("IsMain")
                        .HasColumnName("is_main")
                        .HasColumnType("bit");

                    b.Property<string>("PublicId")
                        .IsRequired()
                        .HasColumnName("public_id")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnName("url")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id")
                        .HasName("picture_pkey");

                    b.HasIndex("ArticleId")
                        .HasName("picture_ix_article_id");

                    b.ToTable("Pictures","dbo");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnName("email")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnName("password_hash")
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnName("password_salt")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnName("username")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id")
                        .HasName("user_pkey");

                    b.ToTable("Users","dbo");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Article", b =>
                {
                    b.HasOne("MyBlog.Entities.Concrete.Category", "Category")
                        .WithMany("Articles")
                        .HasForeignKey("CategoryId")
                        .HasConstraintName("article_category_id_fkey")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MyBlog.Entities.Concrete.User", "User")
                        .WithMany("Articles")
                        .HasForeignKey("UserId")
                        .HasConstraintName("article_user_id_fkey")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.ArticleTranslation", b =>
                {
                    b.HasOne("MyBlog.Entities.Concrete.Article", "Article")
                        .WithMany("ArticleTranslations")
                        .HasForeignKey("ArticleId")
                        .HasConstraintName("article_translation_article_id_fkey")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MyBlog.Entities.Concrete.Language", "Language")
                        .WithMany("ArticleTranslations")
                        .HasForeignKey("LanguageCode")
                        .HasConstraintName("article_translation_language_code_fkey")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.CategoryTranslation", b =>
                {
                    b.HasOne("MyBlog.Entities.Concrete.Category", "Category")
                        .WithMany("CategoryTranslations")
                        .HasForeignKey("CategoryId")
                        .HasConstraintName("category_translation_category_id_fkey")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MyBlog.Entities.Concrete.Language", "Language")
                        .WithMany("CategoryTranslations")
                        .HasForeignKey("LanguageCode")
                        .HasConstraintName("category_translation_language_code_fkey")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Comment", b =>
                {
                    b.HasOne("MyBlog.Entities.Concrete.Article", "Article")
                        .WithMany("Comments")
                        .HasForeignKey("ArticleId")
                        .HasConstraintName("comment_article_id_fkey")
                        .IsRequired();

                    b.HasOne("MyBlog.Entities.Concrete.Comment", "Parent")
                        .WithMany("Comments")
                        .HasForeignKey("ParentId")
                        .HasConstraintName("comment_parent_id_fkey");
                });

            modelBuilder.Entity("MyBlog.Entities.Concrete.Picture", b =>
                {
                    b.HasOne("MyBlog.Entities.Concrete.Article", "Article")
                        .WithMany("Pictures")
                        .HasForeignKey("ArticleId")
                        .HasConstraintName("picture_article_id_fkey")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
